<?php


namespace Ayesh\ComposerPreload;


class PreloadWriter {
  private $list;
  private $count;
  private $status_check = true;

  public function __construct(PreloadList $list) {
    $this->list = $list;
  }

  private function getHeader(): string {
    return <<< HEADER
<?php 

/**
 * Opcache warm-up file generated by Composer Preload plugin.
 * This file was generated automatically. Any changes will be overwritten
 * during the next "composer preload" command. 
 */


HEADER;
  }

  private function getStatusCheck(): string {
    return <<<CHECK

if (!function_exists('opcache_compile_file') || !ini_get('opcache.enable')) {
  echo 'Opcache is not available.';
  die(1);
}

if ('cli' === PHP_SAPI && !ini_get('opcache.enable_cli')) {
  echo 'Opcache is not enabled for CLI applications.';
  die(2);
}

CHECK;
  }

  private function genCacheLine(string $file_path): string {
    $file_path = addslashes($file_path);
    return "opcache_compile_file('{$file_path}');" . PHP_EOL;
  }

  public function getScript(): string {
    $this->count = 0;
    $list = $this->getHeader();

    if ($this->status_check) {
      $list .= $this->getStatusCheck();
    }

    $list .= '// Cache files to opcache.' . PHP_EOL;
    foreach ($this->list as $file) {
      /**
       * @var $file \SplFileInfo
       */
      $list .= $this->genCacheLine($file->getRealPath());
      ++$this->count;
    }

    return $list;
  }

  public function write(string $file_path): void {
    $status = file_put_contents($file_path, $this->getScript());
    if (!$status) {
      throw new \RuntimeException('Error writing the preload file.');
    }
  }

  public function getCount(): int {
    if ($this->count === NULL) {
      throw new \BadMethodCallException('File count is not available until iterated.');
    }
    return $this->count;
  }

  public function setStatusCheck(bool $check): void {
    $this->status_check = $check;
  }
}
